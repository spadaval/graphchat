// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
  error?: {
    code?: number;
    message?: string;
    type?: string;
  };
};

export type GetHealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health";
};

export type GetHealthErrors = {
  /**
   * Server is loading model
   */
  503: _Error;
};

export type GetHealthError = GetHealthErrors[keyof GetHealthErrors];

export type GetHealthResponses = {
  /**
   * Server is healthy
   */
  200: {
    status?: string;
  };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type PostCompletionData = {
  body: {
    prompt:
      | string
      | Array<unknown>
      | {
          prompt_string: string;
          multimodal_data?: Array<string>;
        };
    temperature?: number;
    top_k?: number;
    top_p?: number;
    n_predict?: number;
    stream?: boolean;
    stop?: Array<string>;
    repeat_penalty?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    mirostat?: 0 | 1 | 2;
    mirostat_tau?: number;
    mirostat_eta?: number;
    seed?: number;
    logit_bias?:
      | Array<Array<unknown>>
      | {
          [key: string]: unknown;
        };
    n_probs?: number;
    cache_prompt?: boolean;
    return_tokens?: boolean;
  };
  path?: never;
  query?: never;
  url: "/completion";
};

export type PostCompletionErrors = {
  /**
   * Bad request
   */
  400: _Error;
  /**
   * Internal server error
   */
  500: _Error;
};

export type PostCompletionError =
  PostCompletionErrors[keyof PostCompletionErrors];

export type PostCompletionResponses = {
  /**
   * Successful response
   */
  200: {
    content?: string;
    tokens?: Array<number>;
    stop?: boolean;
    model?: string;
    prompt?: string;
    stop_type?: "none" | "eos" | "limit" | "word";
    stopping_word?: string;
  };
};

export type PostCompletionResponse =
  PostCompletionResponses[keyof PostCompletionResponses];

export type PostTokenizeData = {
  body: {
    content: string;
    add_special?: boolean;
    parse_special?: boolean;
    with_pieces?: boolean;
  };
  path?: never;
  query?: never;
  url: "/tokenize";
};

export type PostTokenizeResponses = {
  /**
   * Successful response
   */
  200:
    | {
        tokens?: Array<number>;
      }
    | {
        tokens?: Array<{
          id?: number;
          piece?: string | Array<number>;
        }>;
      };
};

export type PostTokenizeResponse =
  PostTokenizeResponses[keyof PostTokenizeResponses];

export type PostV1ChatCompletionsData = {
  body: {
    model: string;
    messages: Array<{
      role: "system" | "user" | "assistant";
      content: string;
    }>;
    temperature?: number;
    top_p?: number;
    n?: number;
    stream?: boolean;
    stop?: string | Array<string>;
    max_tokens?: number;
    presence_penalty?: number;
    frequency_penalty?: number;
    logit_bias?: {
      [key: string]: unknown;
    };
    user?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/chat/completions";
};

export type PostV1ChatCompletionsResponses = {
  /**
   * Successful response
   */
  200: {
    id?: string;
    object?: string;
    created?: number;
    model?: string;
    choices?: Array<{
      index?: number;
      message?: {
        role?: string;
        content?: string;
      };
      finish_reason?: string;
    }>;
    usage?: {
      prompt_tokens?: number;
      completion_tokens?: number;
      total_tokens?: number;
    };
  };
};

export type PostV1ChatCompletionsResponse =
  PostV1ChatCompletionsResponses[keyof PostV1ChatCompletionsResponses];

export type PostV1EmbeddingsData = {
  body: {
    model: string;
    input: string | Array<string>;
    encoding_format?: string;
    user?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/embeddings";
};

export type PostV1EmbeddingsResponses = {
  /**
   * Successful response
   */
  200: {
    object?: string;
    data?: Array<{
      object?: string;
      embedding?: Array<number>;
      index?: number;
    }>;
    model?: string;
    usage?: {
      prompt_tokens?: number;
      total_tokens?: number;
    };
  };
};

export type PostV1EmbeddingsResponse =
  PostV1EmbeddingsResponses[keyof PostV1EmbeddingsResponses];

export type GetV1ModelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/models";
};

export type GetV1ModelsResponses = {
  /**
   * Successful response
   */
  200: {
    object?: string;
    data?: Array<{
      id?: string;
      object?: string;
      created?: number;
      owned_by?: string;
    }>;
  };
};

export type GetV1ModelsResponse =
  GetV1ModelsResponses[keyof GetV1ModelsResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:8080" | (string & {});
};
