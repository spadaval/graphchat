// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
  GetHealthData,
  GetHealthErrors,
  GetHealthResponses,
  GetV1ModelsData,
  GetV1ModelsResponses,
  PostCompletionData,
  PostCompletionErrors,
  PostCompletionResponses,
  PostTokenizeData,
  PostTokenizeResponses,
  PostV1ChatCompletionsData,
  PostV1ChatCompletionsResponses,
  PostV1EmbeddingsData,
  PostV1EmbeddingsResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Health check
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetHealthResponses,
    GetHealthErrors,
    ThrowOnError
  >({
    url: "/health",
    ...options,
  });
};

/**
 * Generate completion
 */
export const postCompletion = <ThrowOnError extends boolean = false>(
  options: Options<PostCompletionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCompletionResponses,
    PostCompletionErrors,
    ThrowOnError
  >({
    url: "/completion",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Tokenize text
 */
export const postTokenize = <ThrowOnError extends boolean = false>(
  options: Options<PostTokenizeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostTokenizeResponses,
    unknown,
    ThrowOnError
  >({
    url: "/tokenize",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Chat Completions (OpenAI-compatible)
 */
export const postV1ChatCompletions = <ThrowOnError extends boolean = false>(
  options: Options<PostV1ChatCompletionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostV1ChatCompletionsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/chat/completions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Generate embeddings (OpenAI-compatible)
 */
export const postV1Embeddings = <ThrowOnError extends boolean = false>(
  options: Options<PostV1EmbeddingsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostV1EmbeddingsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/embeddings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List models (OpenAI-compatible)
 */
export const getV1Models = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1ModelsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetV1ModelsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/models",
    ...options,
  });
};
