{
  "openapi": "3.0.0",
  "info": {
    "title": "LLaMA.cpp HTTP Server",
    "description": "Fast, lightweight, pure C/C++ HTTP server providing LLM REST APIs",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Default local server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "ok" }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Server is loading model",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/props": {
      "get": {
        "summary": "Get server global properties",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PropsResponse" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Change server global properties",
        "description": "Requires server to be started with --props flag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Options for changing properties (none yet)"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Properties updated successfully"
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/slots": {
      "get": {
        "summary": "Get current slots processing state",
        "description": "Disabled by default, enable with --slots flag. Use ?fail_on_no_slot=1 to return 503 when no slots available",
        "parameters": [
          {
            "name": "fail_on_no_slot",
            "in": "query",
            "schema": {
              "type": "integer",
              "enum": [1]
            },
            "description": "Return 503 if no available slots"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Slot" }
                }
              }
            }
          },
          "503": {
            "description": "No available slots (when fail_on_no_slot=1)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/slots/{id_slot}": {
      "post": {
        "summary": "Manage slot actions",
        "parameters": [
          {
            "name": "id_slot",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Slot ID"
          },
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["save", "restore", "erase"]
            },
            "description": "Action to perform on the slot"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "Name of the file for save/restore actions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/SlotSaveResponse" },
                    { "$ref": "#/components/schemas/SlotRestoreResponse" },
                    { "$ref": "#/components/schemas/SlotEraseResponse" }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/completion": {
      "post": {
        "summary": "Generate completion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "oneOf": [
                      { "type": "string" },
                      {
                        "type": "array",
                        "items": { "type": ["string", "number"] }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "prompt_string": { "type": "string" },
                          "multimodal_data": {
                            "type": "array",
                            "items": { "type": "string" }
                          }
                        },
                        "required": ["prompt_string"]
                      }
                    ]
                  },
                  "temperature": { "type": "number", "default": 0.8 },
                  "top_k": { "type": "integer", "default": 40 },
                  "top_p": { "type": "number", "default": 0.95 },
                  "n_predict": { "type": "integer", "default": -1 },
                  "stream": { "type": "boolean", "default": false },
                  "stop": {
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  },
                  "repeat_penalty": { "type": "number", "default": 1.1 },
                  "presence_penalty": { "type": "number", "default": 0.0 },
                  "frequency_penalty": { "type": "number", "default": 0.0 },
                  "mirostat": {
                    "type": "integer",
                    "default": 0,
                    "enum": [0, 1, 2]
                  },
                  "mirostat_tau": { "type": "number", "default": 5.0 },
                  "mirostat_eta": { "type": "number", "default": 0.1 },
                  "seed": { "type": "integer", "default": -1 },
                  "logit_bias": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": { "type": "array", "items": {} }
                      },
                      { "type": "object" }
                    ]
                  },
                  "n_probs": { "type": "integer", "default": 0 },
                  "cache_prompt": { "type": "boolean", "default": true },
                  "return_tokens": { "type": "boolean", "default": false }
                },
                "required": ["prompt"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": { "type": "string" },
                    "tokens": {
                      "type": "array",
                      "items": { "type": "integer" }
                    },
                    "stop": { "type": "boolean" },
                    "model": { "type": "string" },
                    "prompt": { "type": "string" },
                    "stop_type": {
                      "type": "string",
                      "enum": ["none", "eos", "limit", "word"]
                    },
                    "stopping_word": { "type": "string" },
                    "generation_settings": {
                      "type": "object",
                      "properties": {
                        "n_predict": { "type": "integer" },
                        "seed": { "type": "integer" },
                        "temperature": { "type": "number" },
                        "dynatemp_range": { "type": "number" },
                        "dynatemp_exponent": { "type": "number" },
                        "top_k": { "type": "integer" },
                        "top_p": { "type": "number" },
                        "min_p": { "type": "number" },
                        "xtc_probability": { "type": "number" },
                        "xtc_threshold": { "type": "number" },
                        "typical_p": { "type": "number" },
                        "repeat_last_n": { "type": "integer" },
                        "repeat_penalty": { "type": "number" },
                        "presence_penalty": { "type": "number" },
                        "frequency_penalty": { "type": "number" },
                        "dry_multiplier": { "type": "number" },
                        "dry_base": { "type": "number" },
                        "dry_allowed_length": { "type": "integer" },
                        "dry_penalty_last_n": { "type": "integer" },
                        "dry_sequence_breakers": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "mirostat": { "type": "integer" },
                        "mirostat_tau": { "type": "number" },
                        "mirostat_eta": { "type": "number" },
                        "stop": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "max_tokens": { "type": "integer" },
                        "n_keep": { "type": "integer" },
                        "n_discard": { "type": "integer" },
                        "ignore_eos": { "type": "boolean" },
                        "stream": { "type": "boolean" },
                        "n_probs": { "type": "integer" },
                        "min_keep": { "type": "integer" },
                        "grammar": { "type": "string" },
                        "samplers": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "speculative.n_max": { "type": "integer" },
                        "speculative.n_min": { "type": "integer" },
                        "speculative.p_min": { "type": "number" },
                        "timings_per_token": { "type": "boolean" }
                      }
                    },
                    "timings": {
                      "type": "object",
                      "properties": {
                        "predicted_per_second": { "type": "number" }
                      }
                    },
                    "tokens_cached": { "type": "integer" },
                    "tokens_evaluated": { "type": "integer" },
                    "truncated": { "type": "boolean" },
                    "completion_probabilities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "logprob": { "type": "number" },
                          "token": { "type": "string" },
                          "bytes": {
                            "type": "array",
                            "items": { "type": "integer" }
                          },
                          "top_logprobs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "integer" },
                                "logprob": { "type": "number" },
                                "token": { "type": "string" },
                                "bytes": {
                                  "type": "array",
                                  "items": { "type": "integer" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/tokenize": {
      "post": {
        "summary": "Tokenize text",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": { "type": "string" },
                  "add_special": { "type": "boolean", "default": false },
                  "parse_special": { "type": "boolean", "default": true },
                  "with_pieces": { "type": "boolean", "default": false }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "tokens": {
                          "type": "array",
                          "items": { "type": "integer" }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tokens": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "piece": {
                                "oneOf": [
                                  { "type": "string" },
                                  {
                                    "type": "array",
                                    "items": { "type": "integer" }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/embeddings": {
      "post": {
        "summary": "Generate embeddings (non-OpenAI-compatible)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": { "type": "string" },
                  "embd_normalize": {
                    "type": "number",
                    "enum": [-1, 0, 1, 2]
                  }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "index": { "type": "integer" },
                      "embedding": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": { "type": "number" }
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": { "type": "number" }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reranking": {
      "post": {
        "summary": "Rerank documents according to a given query",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": { "type": "string" },
                  "documents": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "required": ["query", "documents"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "index": { "type": "integer" },
                      "score": { "type": "number" },
                      "document": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/infill": {
      "post": {
        "summary": "For code infilling",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input_prefix": { "type": "string" },
                  "input_suffix": { "type": "string" },
                  "input_extra": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "filename": { "type": "string" },
                        "text": { "type": "string" }
                      }
                    }
                  },
                  "prompt": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": { "type": "string" },
                    "tokens": {
                      "type": "array",
                      "items": { "type": "integer" }
                    },
                    "stop": { "type": "boolean" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/detokenize": {
      "post": {
        "summary": "Convert tokens to text",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tokens": {
                    "type": "array",
                    "items": { "type": "integer" }
                  }
                },
                "required": ["tokens"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/apply-template": {
      "post": {
        "summary": "Apply chat template to a conversation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": ["system", "user", "assistant"]
                        },
                        "content": { "type": "string" }
                      },
                      "required": ["role", "content"]
                    }
                  }
                },
                "required": ["messages"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lora-adapters": {
      "get": {
        "summary": "Get list of all LoRA adapters",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "path": { "type": "string" },
                      "scale": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Set list of LoRA adapters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "scale": { "type": "number" }
                  },
                  "required": ["id", "scale"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Adapters updated successfully"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Prometheus compatible metrics exporter",
        "responses": {
          "200": {
            "description": "Metrics data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "summary": "Chat Completions (OpenAI-compatible)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": { "type": "string" },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": ["system", "user", "assistant"]
                        },
                        "content": {
                          "oneOf": [
                            { "type": "string" },
                            {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": { "type": "string" },
                                  "text": { "type": "string" },
                                  "image_url": {
                                    "type": "object",
                                    "properties": {
                                      "url": { "type": "string" }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": ["role", "content"]
                    }
                  },
                  "temperature": { "type": "number", "default": 0.8 },
                  "top_p": { "type": "number", "default": 0.95 },
                  "n": { "type": "integer", "default": 1 },
                  "stream": { "type": "boolean", "default": false },
                  "stop": {
                    "oneOf": [
                      { "type": "string" },
                      { "type": "array", "items": { "type": "string" } }
                    ]
                  },
                  "max_tokens": { "type": "integer", "default": 2048 },
                  "presence_penalty": { "type": "number", "default": 0.0 },
                  "frequency_penalty": { "type": "number", "default": 0.0 },
                  "logit_bias": { "type": "object" },
                  "user": { "type": "string" },
                  "response_format": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string" },
                      "schema": { "type": "object" }
                    }
                  },
                  "chat_template_kwargs": { "type": "object" },
                  "reasoning_format": { "type": "string" },
                  "thinking_forced_open": { "type": "boolean" },
                  "parse_tool_calls": { "type": "boolean" },
                  "parallel_tool_calls": { "type": "boolean" }
                },
                "required": ["model", "messages"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "object": { "type": "string" },
                    "created": { "type": "integer" },
                    "model": { "type": "string" },
                    "choices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": { "type": "integer" },
                          "message": {
                            "type": "object",
                            "properties": {
                              "role": { "type": "string" },
                              "content": { "type": "string" }
                            }
                          },
                          "finish_reason": { "type": "string" }
                        }
                      }
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "prompt_tokens": { "type": "integer" },
                        "completion_tokens": { "type": "integer" },
                        "total_tokens": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/embeddings": {
      "post": {
        "summary": "Generate embeddings (OpenAI-compatible)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": { "type": "string" },
                  "input": {
                    "oneOf": [
                      { "type": "string" },
                      { "type": "array", "items": { "type": "string" } }
                    ]
                  },
                  "encoding_format": { "type": "string", "default": "float" },
                  "user": { "type": "string" }
                },
                "required": ["model", "input"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": { "type": "string" },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "object": { "type": "string" },
                          "embedding": {
                            "type": "array",
                            "items": { "type": "number" }
                          },
                          "index": { "type": "integer" }
                        }
                      }
                    },
                    "model": { "type": "string" },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "prompt_tokens": { "type": "integer" },
                        "total_tokens": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/models": {
      "get": {
        "summary": "List models (OpenAI-compatible)",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": { "type": "string" },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "object": { "type": "string" },
                          "created": { "type": "integer" },
                          "owned_by": { "type": "string" },
                          "meta": {
                            "type": "object",
                            "properties": {
                              "vocab_type": { "type": "integer" },
                              "n_vocab": { "type": "integer" },
                              "n_ctx_train": { "type": "integer" },
                              "n_embd": { "type": "integer" },
                              "n_params": { "type": "integer" },
                              "size": { "type": "integer" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": { "type": "integer" },
              "message": { "type": "string" },
              "type": { "type": "string" }
            }
          }
        }
      },
      "PropsResponse": {
        "type": "object",
        "properties": {
          "default_generation_settings": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "id_task": { "type": "integer" },
              "n_ctx": { "type": "integer" },
              "speculative": { "type": "boolean" },
              "is_processing": { "type": "boolean" },
              "params": {
                "type": "object",
                "properties": {
                  "n_predict": { "type": "integer" },
                  "seed": { "type": "integer" },
                  "temperature": { "type": "number" },
                  "dynatemp_range": { "type": "number" },
                  "dynatemp_exponent": { "type": "number" },
                  "top_k": { "type": "integer" },
                  "top_p": { "type": "number" },
                  "min_p": { "type": "number" },
                  "xtc_probability": { "type": "number" },
                  "xtc_threshold": { "type": "number" },
                  "typical_p": { "type": "number" },
                  "repeat_last_n": { "type": "integer" },
                  "repeat_penalty": { "type": "number" },
                  "presence_penalty": { "type": "number" },
                  "frequency_penalty": { "type": "number" },
                  "dry_multiplier": { "type": "number" },
                  "dry_base": { "type": "number" },
                  "dry_allowed_length": { "type": "integer" },
                  "dry_penalty_last_n": { "type": "integer" },
                  "dry_sequence_breakers": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "mirostat": { "type": "integer" },
                  "mirostat_tau": { "type": "number" },
                  "mirostat_eta": { "type": "number" },
                  "stop": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "max_tokens": { "type": "integer" },
                  "n_keep": { "type": "integer" },
                  "n_discard": { "type": "integer" },
                  "ignore_eos": { "type": "boolean" },
                  "stream": { "type": "boolean" },
                  "n_probs": { "type": "integer" },
                  "min_keep": { "type": "integer" },
                  "grammar": { "type": "string" },
                  "samplers": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "speculative.n_max": { "type": "integer" },
                  "speculative.n_min": { "type": "integer" },
                  "speculative.p_min": { "type": "number" },
                  "timings_per_token": { "type": "boolean" }
                }
              },
              "prompt": { "type": "string" },
              "next_token": {
                "type": "object",
                "properties": {
                  "has_next_token": { "type": "boolean" },
                  "has_new_line": { "type": "boolean" },
                  "n_remain": { "type": "integer" },
                  "n_decoded": { "type": "integer" },
                  "stopping_word": { "type": "string" }
                }
              }
            }
          },
          "total_slots": { "type": "integer" },
          "model_path": { "type": "string" },
          "chat_template": { "type": "string" },
          "modalities": {
            "type": "object",
            "properties": {
              "vision": { "type": "boolean" }
            }
          },
          "build_info": { "type": "string" }
        }
      },
      "Slot": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "id_task": { "type": "integer" },
          "n_ctx": { "type": "integer" },
          "speculative": { "type": "boolean" },
          "is_processing": { "type": "boolean" },
          "params": {
            "type": "object",
            "properties": {
              "n_predict": { "type": "integer" },
              "seed": { "type": "integer" },
              "temperature": { "type": "number" },
              "dynatemp_range": { "type": "number" },
              "dynatemp_exponent": { "type": "number" },
              "top_k": { "type": "integer" },
              "top_p": { "type": "number" },
              "min_p": { "type": "number" },
              "xtc_probability": { "type": "number" },
              "xtc_threshold": { "type": "number" },
              "typical_p": { "type": "number" },
              "repeat_last_n": { "type": "integer" },
              "repeat_penalty": { "type": "number" },
              "presence_penalty": { "type": "number" },
              "frequency_penalty": { "type": "number" },
              "dry_multiplier": { "type": "number" },
              "dry_base": { "type": "number" },
              "dry_allowed_length": { "type": "integer" },
              "dry_penalty_last_n": { "type": "integer" },
              "dry_sequence_breakers": {
                "type": "array",
                "items": { "type": "string" }
              },
              "mirostat": { "type": "integer" },
              "mirostat_tau": { "type": "number" },
              "mirostat_eta": { "type": "number" },
              "stop": {
                "type": "array",
                "items": { "type": "string" }
              },
              "max_tokens": { "type": "integer" },
              "n_keep": { "type": "integer" },
              "n_discard": { "type": "integer" },
              "ignore_eos": { "type": "boolean" },
              "stream": { "type": "boolean" },
              "n_probs": { "type": "integer" },
              "min_keep": { "type": "integer" },
              "grammar": { "type": "string" },
              "samplers": {
                "type": "array",
                "items": { "type": "string" }
              },
              "speculative.n_max": { "type": "integer" },
              "speculative.n_min": { "type": "integer" },
              "speculative.p_min": { "type": "number" },
              "timings_per_token": { "type": "boolean" }
            }
          },
          "prompt": { "type": "string" },
          "next_token": {
            "type": "object",
            "properties": {
              "has_next_token": { "type": "boolean" },
              "has_new_line": { "type": "boolean" },
              "n_remain": { "type": "integer" },
              "n_decoded": { "type": "integer" },
              "stopping_word": { "type": "string" }
            }
          }
        }
      },
      "SlotSaveResponse": {
        "type": "object",
        "properties": {
          "id_slot": { "type": "integer" },
          "filename": { "type": "string" },
          "n_saved": { "type": "integer" },
          "n_written": { "type": "integer" },
          "timings": {
            "type": "object",
            "properties": {
              "save_ms": { "type": "number" }
            }
          }
        }
      },
      "SlotRestoreResponse": {
        "type": "object",
        "properties": {
          "id_slot": { "type": "integer" },
          "filename": { "type": "string" },
          "n_restored": { "type": "integer" },
          "n_read": { "type": "integer" },
          "timings": {
            "type": "object",
            "properties": {
              "restore_ms": { "type": "number" }
            }
          }
        }
      },
      "SlotEraseResponse": {
        "type": "object",
        "properties": {
          "id_slot": { "type": "integer" },
          "n_erased": { "type": "integer" }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      }
    }
  }
}
